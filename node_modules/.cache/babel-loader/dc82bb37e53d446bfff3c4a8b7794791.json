{"ast":null,"code":"var _jsxFileName = \"/home/codebrahma/problems/Problems/src/problem2/GitRepo.js\";\nimport React, { Component } from \"react\";\nimport classes from \"./GitRepo.module.css\";\nimport Search from \"./Search\";\n\nclass GitRepo extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      userName: \"\",\n      repoName: \"\",\n      repos: [],\n      repoNames: [],\n      HasRepo: false,\n      shouldClearRepo: false,\n      shouldFilterRepo: false,\n      userNotFound: false,\n      shouldClearFilter: false\n    };\n\n    this.changeUser = event => {\n      this.setState({\n        userName: event.target.value\n      });\n    };\n\n    this.searchUser = () => {\n      const requestUrl = \"https://api.github.com/users/\" + this.state.userName + \"/repos\";\n      fetch(requestUrl).then(res => res.json()).then(json => {\n        this.setState({\n          repos: json\n        });\n\n        if (this.state.repos.message === \"Not Found\") {\n          this.setState({\n            HasRepo: false,\n            shouldClearRepo: false,\n            shouldFilterRepo: false,\n            userNotFound: true\n          });\n          return;\n        }\n\n        let repoNames = this.state.repos.map(repo => {\n          return repo.name;\n        });\n        this.setState({\n          repoNames: repoNames,\n          HasRepo: true,\n          shouldClearRepo: false,\n          shouldFilterRepo: false,\n          userNotFound: false\n        });\n      });\n    };\n\n    this.clearUser = () => {\n      this.setState({\n        userName: \"\",\n        shouldClearRepo: true,\n        HasRepo: false,\n        shouldFilterRepo: false,\n        userNotFound: false\n      });\n    };\n\n    this.filterRepo = event => {\n      this.setState({\n        repoName: event.target.value,\n        shouldClearRepo: false,\n        HasRepo: false,\n        shouldFilterRepo: true,\n        userNotFound: false\n      });\n    };\n\n    this.clearRepo = () => {\n      this.setState({\n        repoName: \"\",\n        shouldClearFilter: true,\n        HasRepo: true,\n        shouldFilterRepo: false,\n        userNotFound: false\n      });\n    };\n  }\n\n  render() {\n    let DisplayRepo = \"\";\n\n    if (this.state.HasRepo) {\n      //Displaying the repos\n      DisplayRepo = this.state.repoNames.map(repo => {\n        return React.createElement(\"p\", {\n          className: classes.displayRepo,\n          key: repo,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 83\n          },\n          __self: this\n        }, repo);\n      });\n    }\n\n    if (this.state.shouldClearRepo) {\n      //clearing the repos\n      DisplayRepo = null;\n    }\n\n    if (this.state.userNotFound) {\n      //If userName does not exits\n      DisplayRepo = React.createElement(\"p\", {\n        className: classes.wrongUserName,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, \"No UserName Exits in This Name\");\n    }\n\n    if (this.state.shouldFilterRepo) {\n      //Filtering the repos\n      let filter = this.state.repoName;\n      DisplayRepo = this.state.repoNames.map(repo => {\n        if (repo.includes(filter)) {\n          return React.createElement(\"p\", {\n            className: classes.displayRepo,\n            key: repo,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 102\n            },\n            __self: this\n          }, repo);\n        } else {\n          return null;\n        }\n      });\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: classes.heading,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, \"Git Repository\"), React.createElement(\"div\", {\n      className: classes.Container,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, React.createElement(Search, {\n      userName: this.state.userName,\n      changeUser: this.changeUser,\n      searchUser: this.searchUser,\n      clearUser: this.clearUser,\n      filterRepo: this.filterRepo,\n      clearRepo: this.clearRepo,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }), DisplayRepo));\n  }\n\n}\n\nexport default GitRepo;","map":{"version":3,"sources":["/home/codebrahma/problems/Problems/src/problem2/GitRepo.js"],"names":["React","Component","classes","Search","GitRepo","state","userName","repoName","repos","repoNames","HasRepo","shouldClearRepo","shouldFilterRepo","userNotFound","shouldClearFilter","changeUser","event","setState","target","value","searchUser","requestUrl","fetch","then","res","json","message","map","repo","name","clearUser","filterRepo","clearRepo","render","DisplayRepo","displayRepo","wrongUserName","filter","includes","heading","Container"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport classes from \"./GitRepo.module.css\";\nimport Search from \"./Search\";\nclass GitRepo extends Component {\n  state = {\n    userName: \"\",\n    repoName: \"\",\n    repos: [],\n    repoNames: [],\n    HasRepo: false,\n    shouldClearRepo: false,\n    shouldFilterRepo: false,\n    userNotFound: false,\n    shouldClearFilter:false\n  };\n  changeUser = event => {\n    this.setState({\n      userName: event.target.value,\n    });\n  };\n  searchUser = () => {\n    const requestUrl =\n      \"https://api.github.com/users/\" + this.state.userName + \"/repos\";\n    fetch(requestUrl)\n      .then(res => res.json())\n      .then(json => {\n        this.setState({\n          repos: json,\n        });\n        if (this.state.repos.message === \"Not Found\") {\n          this.setState({\n            HasRepo: false,\n            shouldClearRepo: false,\n            shouldFilterRepo: false,\n            userNotFound: true,\n          });\n          return;\n        }\n        let repoNames = this.state.repos.map(repo => {\n          return repo.name;\n        });\n        this.setState({\n          repoNames: repoNames,\n          HasRepo: true,\n          shouldClearRepo: false,\n          shouldFilterRepo: false,\n          userNotFound: false,\n        });\n      });\n  };\n  clearUser = () => {\n    this.setState({\n      userName: \"\",\n      shouldClearRepo: true,\n      HasRepo: false,\n      shouldFilterRepo: false,\n      userNotFound: false,\n    });\n  };\n  filterRepo = (event) => {\n    this.setState({\n      repoName: event.target.value,\n      shouldClearRepo: false,\n      HasRepo: false,\n      shouldFilterRepo: true,\n      userNotFound: false,\n    });\n  };\n  clearRepo=()=>{\n    this.setState({\n      repoName: \"\",\n      shouldClearFilter: true,\n      HasRepo: true,\n      shouldFilterRepo: false,\n      userNotFound: false,\n    });\n  }\n  render() {\n    let DisplayRepo = \"\";\n    if (this.state.HasRepo) {                                        //Displaying the repos\n      DisplayRepo = this.state.repoNames.map(repo => {\n        return (\n          <p className={classes.displayRepo} key={repo}>\n            {repo}\n          </p>\n        );\n      });\n    }\n    if (this.state.shouldClearRepo) {                                 //clearing the repos\n      DisplayRepo = null;\n    }\n    if (this.state.userNotFound) {                                     //If userName does not exits\n      DisplayRepo = (\n        <p className={classes.wrongUserName}>No UserName Exits in This Name</p>\n      );\n    }\n    if (this.state.shouldFilterRepo) {                                   //Filtering the repos\n      let filter = this.state.repoName;\n      DisplayRepo = this.state.repoNames.map(repo => {\n        if (repo.includes(filter)) {\n          return (\n            <p className={classes.displayRepo} key={repo}>\n              {repo}\n            </p>\n          );\n        } else {\n          return null;\n        }\n      });\n    }\n    return (\n      <div>\n        <h1 className={classes.heading}>Git Repository</h1>\n        <div className={classes.Container}>\n          <Search\n            userName={this.state.userName}\n            changeUser={this.changeUser}\n            searchUser={this.searchUser}\n            clearUser={this.clearUser}\n            filterRepo={this.filterRepo}\n            clearRepo={this.clearRepo}\n          />\n          {DisplayRepo}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default GitRepo;\n"]},"metadata":{},"sourceType":"module"}